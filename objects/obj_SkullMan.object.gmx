<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_SkullMan</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize variables
life = 10;
status = "normal";
c_rateoffire = 10;
rof = 0;

//physics stuff
a_aircontrol = 1;
a_gravity = 1;
a_slide = 1.5;
a_runspeed = 1.2;
a_friction = .97;
a_minfrictionspeed = .4;
v_jumpspeed = 12;
a_jumpaccel = 2.6;
v_hmaxspeed = 18;
v_vmaxspeed = 100;
t_jump = 0;


//animation variables
anim_state = "idle";
anim_direction = "right";
anim_frame = 0;
frame_change = 10;
frame_count = 0;
image_speed = 0;

//whatever
gravity = a_gravity ;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get input
key_right = keyboard_check(vk_right) + keyboard_check(ord("D"));
key_left = -keyboard_check(vk_left) -keyboard_check(ord("A"));
key_jump = keyboard_check(vk_space) + keyboard_check(ord("W"));
mouse_left = mouse_check_button(mb_left);

//do stuff
move = key_right + key_left;

//set anim direction
if(move &gt; 0) anim_direction = "right";
if(move &lt; 0) anim_direction = "left";

//not colliding with the ground
if(not(place_meeting(x,y+1,obj_Wall))
    or (place_meeting(x,y+1,obj_Wall) and key_jump = 1))
{
    anim_state = "jump";
    
    if(t_jump &lt; 5 and key_jump = 1)
    {
        vspeed -= a_jumpaccel;
    }
    
    if((place_meeting(x,y+1,obj_Wall) and key_jump = 1)) 
    {
        vspeed -= v_jumpspeed;
        t_jump = 0    
    }
    
    t_jump++;
    
    //air control right
    if(move &gt; 0) hspeed += a_aircontrol;

    //air control left
    if(move &lt; 0) hspeed -= a_aircontrol; 
}
else
{
    //move right
    if(move &gt; 0)
    {
        if(hspeed &gt;= 0)
        {
            anim_state = "run";
            hspeed += a_runspeed;
        }
        else
        {
            anim_state = "slide";
            hspeed += a_slide;
        }  
    }
    
    //move left
    if(move &lt; 0)
    {
        if(hspeed &lt;= 0)
        {
            anim_state = "run";
            hspeed -= a_runspeed;
        }
        else
        {
            anim_state = "slide";
            hspeed -= a_slide;
        }
    }
}

//friction
if(place_meeting(x,y+1,obj_Wall))
{
    if(abs(hspeed) &lt;= a_minfrictionspeed)
        hspeed = 0;
    else
    {   
        if(abs(hspeed) * (1-a_friction) &lt; a_minfrictionspeed)
        {
            if(hspeed&gt;0) hspeed -= a_minfrictionspeed;
            if(hspeed&lt;0) hspeed += a_minfrictionspeed;
        }
        else
            hspeed *= a_friction;
    }
}

//bound speeds
if(hspeed &gt; v_hmaxspeed) hspeed = v_hmaxspeed;
if(hspeed &lt; -v_hmaxspeed) hspeed = -v_hmaxspeed;
if(vspeed &gt; v_vmaxspeed) vspeed = v_vmaxspeed;
if(vspeed &lt; -v_vmaxspeed) vspeed = -v_vmaxspeed;


//idle
if ((vspeed = 0) and move = 0 and place_meeting(x,y+1,obj_Wall))
    anim_state = "idle";

//out of bounds    
if(y &gt; room_height + 10)
{
    instance_create(32,32,obj_SkullMan);
    instance_destroy();
    
}

rof--;
if(rof&lt;0) rof = 0;

//shootinstuff
if(mouse_left and rof=0)
{
    with(instance_create(x,y,obj_Boomerang))
    {
        pointer_dir = point_direction(x,y,mouse_x,mouse_y);
        x = round(x + 64*dcos(pointer_dir));
        y = round(y - 64*dsin(pointer_dir));
        c_throwdir = pointer_dir;
        
        for(i=0;i&lt;c_backsteps;i++)
        {
            prev_x[i] = (1/c_backsteps)*dcos(c_throwdir)*v_throw;
            prev_y[i] = (1/c_backsteps)*(-dsin(c_throwdir)*v_throw);
        }
    }
    rof = c_rateoffire;
}


/*
//stop here
if(move = 0) hspeed = 0;

if(move &gt; 0)
{
 //regular move
 //if(hspeed &lt; 0) move_v = 0;
 //if(hspeed = 0 and anim_state = "idle") hspeed += 5;
 //move_v += move_accel;
 //hspeed += move_v;
 //if(abs(hspeed) &gt; max_hspeed) hspeed = max_hspeed;
 if(anim_direction != "jump") anim_state = "run";
 hspeed = 10;
 anim_direction = "right";
}

if(move &lt; 0)
{
 //regular move
//  if(hspeed &gt; 0)
  // move_v = 0;
 //if(hspeed = 0 and anim_state = "idle") hspeed -= 5;
  //move_v -= move_accel;
 //hspeed += move_v;
// if(abs(hspeed) &gt; max_hspeed) hspeed = -max_hspeed;
 hspeed = -10;
 if(anim_direction != "jump") anim_state = "run";
 anim_direction = "left";      
}

if(key_jump = 1 and vspeed = 0)
{
    anim_state = "jump";
    vspeed = -jump_speed;
}
if(not(place_meeting(x,y+1,obj_Wall))) anim_state = "jump";   
*/


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Wall">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// URL: http://gmc.yoyogames.com/index.php?showtopic=545531
// USE: Apply this script in Player -&gt; Collides With -&gt; Solid event

//CODE: 

if (!place_free(x+hspeed,y))
{
    if (hspeed&lt;=0){move_contact_solid(180,abs(hspeed));}
    if (hspeed&gt;0){move_contact_solid(0,abs(hspeed));}
    hspeed=0;
}
  
if (!place_free(x,y+vspeed))
{
    if (vspeed&lt;=0){move_contact_solid(90,abs(vspeed));}
    if (vspeed&gt;0){move_contact_solid(270,abs(vspeed));}
    vspeed=0;
}

if (!place_free(x+hspeed,y+vspeed))
{
    hspeed=0;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(anim_direction = "left")image_xscale = -abs(image_xscale);
    else image_xscale = abs(image_xscale);

//draw character
switch(anim_state)
{
    case "idle":
        image_index = 0;
        draw_self();
        break;
        
    case "jump":
        image_index = 3;
        draw_self();
        break;
        
    case "run":
        frame_count++;
        if(frame_count &lt;= frame_change/2) image_index = 1;
            else image_index = 0;
        if(frame_count &gt; frame_change) frame_count = 0;
        draw_self()
        break;
        
    case "slide":
        image_index = 5;
        draw_self();
        break;
        
    default:
        draw_self();
}

pointer_dir = point_direction(x,y,mouse_x,mouse_y);
pointer_x = round(x + 64*dcos(pointer_dir));
pointer_y = round(y - 64*dsin(pointer_dir));

draw_sprite_ext(spr_Arrow,1,pointer_x,pointer_y,1,1,pointer_dir+270,c_white,1);

//text debug
draw_set_font(fnt_CN);
draw_text_color(view_xview[0]+32,view_yview[0]+32,
    "HSPEED: " + string(hspeed)
    + "#VSPEED: " + string(vspeed)
    + "#DIRECTION: " + string(direction)
    + "#GRAVITY: " + string(gravity)
    + "#X: " + string(x)
    + "   Y: " + string(y)
    + "#POINTER_DIR: " + string(pointer_dir)
    + "#P_X: " + string(pointer_x) 
    + "   P_Y: " + string(pointer_y)
    + "#T_JUMP: " + string(t_jump)
,c_black,c_black,c_black,c_black,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>11,13</point>
    <point>13,13</point>
  </PhysicsShapePoints>
</object>
